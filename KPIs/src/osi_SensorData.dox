/*!
\class DetectedEntityHeader
\brief The header attributes of each detected entity.

\par Requirements

field            | type             | repeated | Requirements
-----------------|------------------|----------|----------------------
measurement_time | \c Timestamp     | No       | Must be set and valid
cycle_counter    | \c uint64        | No       | Must be set and valid
data_qualifier   | \c DataQualifier | No       | Must be set and valid

\par Details on measurement_time

Time stamp at which the measurement was taken (not the time at which it
was processed or at which it is transmitted) in the global synchronized
time.

\note See \c SensorData::timestamp and \c
SensorData::last_measurement_time for detailed discussions on the
semantics of time-related fields.

\note TBD: how to define a cycle_counter?

################################################################################

\class DetectedEntityHeader::DataQualifier
\brief Data qualifier communicates the overall availability of the interface.

Number | Availability                       | Remarks
-------|------------------------------------|--------------------------------------------
0      | DATA_QUALIFIER_UNKNOWN             | Unknown (must not be used in ground truth).
1      | DATA_QUALIFIER_OTHER               | Other (unspecified but known).
2      | DATA_QUALIFIER_AVAILABLE           | Data is available.
3      | DATA_QUALIFIER_AVAILABLE_REDUCED   | Reduced data is available.
4      | DATA_QUALIFIER_NOT_AVAILABLE       | Data is not available.
5      | DATA_QUALIFIER_BLINDNESS           | Sensor is blind.
6      | DATA_QUALIFIER_TEMPORARY_AVAILABLE | Sensor temporary available.

################################################################################

\class SensorData
\brief The sensor information derived from \c GroundTruth and processed by
sensor-models.

The sensor information is supposed to imitate the output of real sensors.
All information regarding the environment is given with respect to
the virtual sensor coordinate system specified in
\c SensorData::mounting_position, except for feature data, which is given
with respect to the physical sensor coordinate system specified in the
corresponding physical sensor's coordinate system.

When simulating multiple distinct sensors, each sensor can produce an
individual copy of the \c SensorData interface. This allows an independent
treatment of the sensors.

Sensor fusion models can consolidate multiple \c SensorData interfaces into
one consolidated \c SensorData interface.  This can happen either in
seperate logical models, consuming and producing \c SensorData interfaces,
or it can happen as part of a combined sensor/logical model, that consumes
\c SensorView interfaces and directly produces one consolidated \c SensorData
output.

\par Requirements
field                      | type                        | repeated | Requirements
---------------------------|-----------------------------|----------|----------------------------------------------
version                    | \c InterfaceVersion         | No       | Must be set and valid
timestamp                  | \c Timestamp                | No       | Must be set and valid
host_vehicle_location      | \c BaseMoving               | No       | Must be set and valid
host_vehicle_location_rmse | \c BaseMoving               | No       | Must be set and valid
sensor_id                  | \c Identifier               | No       | Must correspond to the id of a virtual sensor
mounting_position          | \c MountingPosition         | No       | Must be set and valid
mounting_position_rmse     | \c MountingPosition         | No       | Must be set and valid
sensor_view                | \c SensorView               | Yes      | Must be set and valid
last_measurement_time      | \c Timestamp                | No       | Must be set and valid
stationary_object_header   | \c DetectedEntityHeader     | No       | Must be set and valid
stationary_object          | \c DetectedStationaryObject | Yes      | Must be set and valid
moving_object_header       | \c DetectedEntityHeader     | No       | Must be set and valid
moving_object              | \c DetectedMovingObject     | Yes      | Must be set and valid
traffic_sign_header        | \c DetectedEntityHeader     | No       | Must be set and valid
traffic_sign               | \c DetectedTrafficSign      | Yes      | Must be set and valid
traffic_light_header       | \c DetectedEntityHeader     | No       | Must be set and valid
traffic_light              | \c DetectedTrafficLight     | Yes      | Must be set and valid
road_marking_header        | \c DetectedEntityHeader     | No       | Must be set and valid
road_marking               | \c DetectedRoadMarking      | Yes      | Must be set and valid
lane_boundary_header       | \c DetectedEntityHeader     | No       | Must be set and valid
lane_boundary              | \c DetectedLaneBoundary     | Yes      | Must be set and valid
lane_header                | \c DetectedEntityHeader     | No       | Must be set and valid
lane                       | \c DetectedLane             | Yes      | Must be set and valid
occupant_header            | \c DetectedEntityHeader     | No       | Must be set and valid
occupant                   | \c DetectedOccupant         | Yes      | Must be set and valid
feature_data               | \c FeatureData              | No       | Must be set and valid

\par Details on timestamp

The timestamp of the sensor data. Zero time is arbitrary but must be
identical for all messages. Zero time does not need to coincide with
the unix epoch. Recommended is the starting time point of the
simulation.

\note This is the point in time that the sensor data message becomes
available to the rest of the system (i.e. the driving functions), so
it corresponds with the sending time and thus takes the latency of
internal processing of the sensor into account. Latencies of bus
communications, etc., that occur after the sensor output have to be
applied on top of this, if needed.

The time that the actual measurement was performed (which will usually
correspond with the timestamp of the \c GroundTruth the sensor model
processed to arrive at these results) can be found in the additional
field \c SensorData::last_measurement_time.

For an ideal zero latency sensor the two timestamps would be the same
and would correspond with the timestamp from the current \c GroundTruth
message.

For a sensor model that does not know its own internal latencies (e.g.
a dumb sensor with no internal time concept), the two timestamps might
also be identical, but delayed from the \c GroundTruth timestamp.

\par Details on mounting_position

The virtual mounting position of the sensor (origin and orientation
of the sensor coordinate system) given in vehicle coordinates [1].
The virtual position pertains to the sensor as a whole, regardless
of the actual position of individual physical detectors, and governs
the sensor-relative coordinates in detected objects of the sensor
as a whole.  Individual features detected by individual physical
detectors are governed by the actual physical mounting positions
of the detectors, as indicated in the technology-specific sub-views
and sub-view configurations.

\arg \b x-direction of sensor coordinate system: sensor viewing direction
\arg \b z-direction of sensor coordinate system: sensor (up)
\arg \b y-direction of sensor coordinate system: perpendicular to x and z
right hand system

\par References:
- [1] DIN ISO 8855:2013-11

\note This field is usually static during the simulation.
\note The origin of vehicle's coordinate system in world frame is
( \c MovingObject::base . \c BaseMoving::position +
Inverse_Rotation_yaw_pitch_roll( \c MovingObject::base . \c
BaseMoving::orientation) * \c
MovingObject::VehicleAttributes::bbcenter_to_rear) . The orientation of
the vehicle's coordinate system is equal to the orientation of the
vehicle's bounding box \c MovingObject::base . \c
BaseMoving::orientation.

\par Details on last_measurement_time

The timestamp of the last real-world measurement (e.g. GT input) that
this set of sensor data takes into account. This in effect is the last
time instance of reality the measurements correspond to. See field
\c SensorData::timestamp for a detailed discussion. This value is also
the upper bound to the \c DetectedEntityHeader::measurement_time and the
feature data \c SensorDetectionHeader::measurement_time fields.

*/