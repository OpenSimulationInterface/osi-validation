# Use distribution Ubuntu 18.04 Bionic
dist: bionic

# Use python build environment.
language: python

python:
    - "3.6"

# Handle dependencies in separate directory.
before_install:
    - DEPS_DIR="${HOME}/deps"
    - mkdir -p "${DEPS_DIR}"
    - cd "${DEPS_DIR}"

# Install necessary packages.
install:
    # Install a recent version of CMake
    - |
        CMAKE_URL="https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz"
        if [ ! -f ${DEPS_DIR}/cmake/bin/cmake ] ; then mkdir -p cmake ; travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake ; fi
        export PATH=${DEPS_DIR}/cmake/bin:${PATH}

    # Install a recent version of the Protobuf
    - |
        PROTOBUF_URL="https://github.com/google/protobuf/releases/download/v3.2.0/protobuf-cpp-3.2.0.tar.gz"
        if [ ! -f ${DEPS_DIR}/protobuf/install/bin/protoc ] ; then mkdir -p protobuf ; travis_retry wget --no-check-certificate --quiet -O - ${PROTOBUF_URL} | tar --strip-components=1 -xz -C protobuf ; cd protobuf ; ./configure --prefix=${DEPS_DIR}/protobuf/install ; make ; make install ; fi
        export PATH=${DEPS_DIR}/protobuf/install/bin:${PATH}

    # Install proto2cpp for doxygen
    - |
        PROTO2CPP_URL="https://github.com/OpenSimulationInterface/proto2cpp.git"
        if [ ! -f ${DEPS_DIR}/proto2cpp ] ; then mkdir -p proto2cpp ; git clone ${PROTO2CPP_URL} ${DEPS_DIR}/proto2cpp ; fi

    - sudo apt-get install python3-pip protobuf-compiler unzip
    - pip install progress    

# Change directory back to default build directory.
before_script:
    - cd "${TRAVIS_BUILD_DIR}"

# Run the build script and generate documentation.
script:
    # Debug
    - which python
    - python -m site

    # Install osi-validation
    - cd open-simulation-interface
    - pip install .
    - cd ..
    - git clone https://github.com/OpenSimulationInterface/proto2cpp.git
    - pip install .    
    - cp -R requirements-osi-3 /home/travis/virtualenv/python3.6.7/lib/python3.6/site-packages/

    # Unzip data
    - unzip data/small_test.zip -d data

    # Check if rule syntax in osi is correct
    # - python test_cases.py

    # Check rule correctness with unittests
    - python -m unittest discover tests

    # Show validator usage
    - osivalidator -h

    # Run validator on a small test
    - osivalidator data/small_test.txt

